// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  githubName    String?
  githubAccount String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]

  serverIds String[] @db.ObjectId
  servers   Server[] @relation(fields: [serverIds], references: [id])

  messages Message[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Server {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  createdAt    DateTime @default(now())
  owner        String
  ownerId      String
  description  String?
  maxMembers   Int?
  membersCount Int?
  status       String

  userIds String[] @db.ObjectId
  users   User[]   @relation(fields: [userIds], references: [id])

  // channelIds String[] @db.ObjectId
  // channels Channel[] @relation(fields: [channelIds], references: [id])
  channels Channel[]
}

model Channel {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  serverId String @db.ObjectId
  servers  Server @relation(fields: [serverId], references: [id])

  messageIds String[]  @db.ObjectId
  messages   Message[]
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String?
  image     String?
  createdAt DateTime @default(now())

  channelId String  @db.ObjectId
  channel   Channel @relation(fields: [channelId], references: [id])

  senderId String @db.ObjectId
  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)
}
